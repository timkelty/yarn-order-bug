#!/usr/bin/env node

// TODO: Remove this once babel-loader updates
// https://github.com/babel/babel-loader/pull/391
process.noDeprecation = true;

const yargs = require('yargs');
const { cond, equals, T } = require('ramda');
const exists = require('file-exists');
const build = require('./build');
const inspect = require('./inspect');
const start = require('./start');
const test = require('./test');
const execute = require('./execute');

const args = yargs
  .option('inspect', {
    description: 'Output a string representation of the configuration used by Neutrino and exit',
    boolean: true,
    default: false,
    global: true
  })
  .option('use', {
    description: 'A list of Neutrino middleware used to configure the build',
    array: true,
    default: [],
    global: true
  })
  .option('options', {
    description: 'Set Neutrino options and environment variables, e.g. --options.env.NODE_ENV production',
    default: {},
    global: true
  })
  .option('quiet', {
    description: 'Disable console output of CLI commands',
    boolean: true,
    default: false,
    global: true
  })
  .option('debug', {
    description: 'Run in debug mode',
    boolean: true,
    default: false,
    global: true
  })
  .command('start', 'Build a project in development mode')
  .command('build', 'Compile the source directory to a bundled build')
  .command('test [files..]', 'Run all suites from the test directory or provided files', {
    coverage: {
      description: 'Collect test coverage information and generate report',
      boolean: true,
      default: false
    },
    watch: {
      description: 'Watch source files for changes and re-run tests',
      boolean: true,
      default: false
    }
  })
  .command('*')
  .demandCommand(1, 'You must specify a command for Neutrino to run.\nUSAGE:  neutrino <command>')
  .recommendCommands()
  .version()
  .help()
  .argv;

const rc = '.neutrinorc.js';
const cmd = args.inspect ? 'inspect' : args._[0];
const middleware = [...new Set([
  ...(exists.sync(rc, { root: process.cwd() }) ? [rc] : []),
  ...args.use
])];

process.on('unhandledRejection', (err) => {
  if (!args.quiet) {
    console.error('');
    console.error(err);
  }

  process.exit(1);
});

cond([
  [equals('build'), () => build(middleware, args)],
  [equals('start'), () => start(middleware, args)],
  [equals('test'), () => test(middleware, args)],
  [equals('inspect'), () => inspect(middleware, args)],
  [T, () => execute(middleware, args)]
])(cmd);
